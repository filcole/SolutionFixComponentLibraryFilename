# TEMPORARY: There's a bug that causes default command libraries to export with inconsistent filenames.
# We will save the filename with a hex version of the time in the AppVersion, so that it
# only changes when the app version changes.

# Find any canvas App metadata (one exist per canvas app)
# For each canvas app CanvasApps/*meta.xml found
#   Extract the App Version
#   Convert the time element in the <AppVersion> tag to a five digit hexidecimal value
#   Rename the BackgroundImage and DocumentUri
#   Update the meta.xml to point to these new files

# NOTES/WARNINGS:
# 1. The power platform solution is proprietary, this may stop working at any time.
# 2. Do not report issues with solution import/export to Microsoft if you're using this script

param (
    [Parameter(Mandatory = $true, HelpMessage = "Enter the path to the unpacked solution")]
    [Alias("p", "path")]
    [string]$solutionfolder
)

Function CheckSolutionFolder {

    if (!( Test-Path -Path $solutionfolder -PathType Container)) {
        Write-Error "Could not find folder $solutionfolder"
        exit
    }
    
    # Resolve any relative folder provided to script to full pathname
    $solnxml = Resolve-Path $solutionfolder

    $solnxml = Join-Path $solnxml "Other"
    $solnxml = Join-Path $solnxml "Solution.xml"

    if (!( Test-Path -Path $solnxml -PathType Leaf)) {
        Write-Error "Not valid solution folder. $solnxml does not exist"
        exit
    }
}

Function RenameCanvasAppFile([string]$appXml, [string]$solutionfolder, [string]$tag, [string]$regex, [string]$appVersionHex)
{
    $re = "<$tag>" + $regex + "</$tag>"

    if (!($appXml -match $re)) {
        Write-Host "Warning: Could not find matching regex: $re"
        return $appXml
    }

    if ($matches[2] -eq $appVersionHex) {
        # No need to rename
        return $appXml
    }

    $fileName = $matches[1]  + $matches[2] + $matches[3]
    $newFileName = $matches[1] + $appVersionHex + $matches[3]

    Write-Host "Renaming $fileName to $newFileName"
    
    $origFullPath = Join-Path $solutionfolder $fileName
    $newFullPath = Join-Path $solutionfolder $newFileName
    
    Move-Item $origFullPath $newFullPath

    $appXml = $appXml -replace "<$tag>$fileName</$tag>", "<$tag>$newFileName</$tag>"

    # Return updated content
    return $appXml
}

Function FixCanvasAppFilenames() {
    Write-Host "Scanning for CanvasApps with non-determinate filenames" 

    $canvasFolder = Join-Path $solutionfolder "CanvasApps"    

    $canvasApps = Get-ChildItem -Path "$canvasFolder" -Recurse -File -Filter *.meta.xml | 
    Select-String '<CanvasApp xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">' -List | 
    Select-Object Path, Filename
    $canvasApps | ForEach-Object {
        $metadata = $_

        [xml]$xmlDoc = Get-Content -path $metadata.Path
        $appXml = Get-Content -path $metadata.Path -Raw
        $origAppXml = $appXml
        
        $appVersion = $xmlDoc.CanvasApp.AppVersion
        $appDate = Get-Date -Date $appVersion
        $appVersionHex = '{0:x5}' -f ($appDate.Second + $appDate.Minute * 100 + $appDate.Hour * 10000)

        $appXml = RenameCanvasAppFile `
            $appXml $solutionfolder `
            "BackgroundImageUri" "(/CanvasApps/\S+)(\d{5})(_BackgroundImageUri)" $appVersionHex

        $appXml = RenameCanvasAppFile `
            $appXml $solutionfolder `
            "DocumentUri" "(/CanvasApps/\S+)(\d{5})(_DocumentUri\.msapp)" $appVersionHex

        if ($origAppXml -eq $appXml) {
            return
        }

        Write-Host "Saving updated metadata in $($metadata.FileName)"

        # Save the fixed canvas app metadata
        $appXml | Set-Content -NoNewLine -Path $metadata.Path
    }
}

## MAIN PROGRAM

CheckSolutionFolder

$solutionfolder = Resolve-Path $solutionfolder
FixCanvasAppFilenames
